{"version":3,"file":"static/js/779.887ab200.chunk.js","mappings":"4RAEaA,EAAmBC,EAAAA,GAAAA,QAAH,+CAIhBC,EAAoBD,EAAAA,GAAAA,EAAH,oEAKjBE,EAASF,EAAAA,GAAAA,GAAH,wLAWNG,EAAUH,EAAAA,GAAAA,EAAH,kDAIPI,EAASJ,EAAAA,GAAAA,EAAH,6CAINK,EAAOL,EAAAA,GAAAA,EAAH,6C,SCkBjB,EA1CgB,WACZ,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,WAAyBL,GAAzB,wFACuBM,EAAAA,EAAAA,IAAkBN,GADzC,OACUO,EADV,OAEIH,EAAgBG,EAAKC,SAFzB,2CADY,yBAAC,SAAD,2BAMZC,CAAUT,EAGb,GAAE,CAACA,KAGA,SAACP,EAAD,UAEiC,IAAxBU,EAAaO,QAEN,wBAEQP,EAAaQ,KAAI,YAA0C,IAAvCC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,QACtBC,EADgD,EAAjBC,WACNC,MAAM,EAAG,IAExC,OACI,UAACrB,EAAD,YACI,SAACC,EAAD,UAAUiB,KACV,UAAChB,EAAD,4BAAuBe,MACvB,UAAC,EAAD,yBAAkBE,OAHTH,EAMpB,OAIX,SAACjB,EAAD,oEAIrB,C,mMCxCM,SAAeuB,IAAtB,4CAAO,OAAP,oBAAO,6GAEwBC,EAAAA,EAAAA,IAAA,sBAFxB,UAGyB,OADlBC,EAFP,QAGcC,OAHd,yCAIYD,EAASb,MAJrB,uDAOCe,QAAQC,IAAI,KAAMC,SAPnB,gFAWA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,gGAEwBP,EAAAA,EAAAA,IAAA,8BAAiCO,IAFzD,UAGyB,OADlBN,EAFP,QAGcC,OAHd,yCAIYD,EAASb,MAJrB,uDAOCe,QAAQC,IAAI,KAAMC,SAPnB,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAiCf,GAAjC,gGAEwBO,EAAAA,EAAAA,IAAA,iBAAoBP,IAF5C,UAGyB,OADlBQ,EAFP,QAGcC,OAHd,yCAIYD,EAASb,MAJrB,uDAOCe,QAAQC,IAAI,KAAMC,SAPnB,gFAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA8BhB,GAA9B,gGAEwBO,EAAAA,EAAAA,IAAA,iBAAoBP,EAApB,aAFxB,UAGyB,OADlBQ,EAFP,QAGcC,OAHd,yCAIYD,EAASb,MAJrB,uDAOCe,QAAQC,IAAI,KAAMC,SAPnB,gFAWA,SAAelB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCM,GAAjC,gGAEwBO,EAAAA,EAAAA,IAAA,iBAAoBP,EAApB,aAFxB,UAGyB,OADlBQ,EAFP,QAGcC,OAHd,yCAIYD,EAASb,MAJrB,uDAOCe,QAAQC,IAAI,KAAMC,SAPnB,gFA/CPL,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CAAEU,QAFV,mC","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/movies-api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ReviewsContainer = styled.section`\n    margin-top: 40px;\n`;\n\nexport const ReviewsErrMessage = styled.p`\n    margin-top: 40px;\n    color: #EB8382;\n`;\n\nexport const Review = styled.li`\n    color: #446381;\n    font-size: 16px;\n    border: 1px solid #826F8C;\n    padding: 12px;\n\n    &:not(:last-child) {\n        margin-bottom: 24px;\n    }\n`;\n\nexport const Content = styled.p`\n    margin-bottom: 16px;\n`;\n\nexport const Author = styled.p`\n    color: #EB8382;\n`;\n\nexport const Date = styled.p`\n    color: #EB8382;\n`;\n\n\n\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieReviews } from \"services/movies-api\";\nimport { ReviewsContainer, ReviewsErrMessage, Review, Content, Author, Date } from \"./Reviews.styled\";\n\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [movieReviews, setMovieReviews] = useState([]);\n\n    useEffect(() => {\n        async function getReview(movieId) {\n            const data = await fetchMovieReviews(movieId);\n            setMovieReviews(data.results);\n        };\n\n        getReview(movieId);\n\n\n    }, [movieId])\n\n    return (\n        <ReviewsContainer>\n            {\n                (movieReviews.length !== 0)\n                    ? (\n                        <ul>\n                            {\n                                movieReviews.map(({ id, author, content, updated_at }) => {\n                                    const publishDate = updated_at.slice(0, 10);\n\n                                    return (\n                                        <Review key={id}>\n                                            <Content>{content}</Content>\n                                            <Author>Author name:  {author}</Author>\n                                            <Date>Published: {publishDate}</Date>\n                                        </Review>\n                                    )\n                                })\n                            }\n                        </ul>\n                    )\n                    : <ReviewsErrMessage>Unfortunately we have not found reviews ðŸ˜ž</ReviewsErrMessage>\n            }\n        </ReviewsContainer>\n    )\n};\n\nexport default Reviews;","import axios from \"axios\";\n\nconst API_KEY = '0feaca93847c0f717b0c2876a0a51030';\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\naxios.defaults.params = { api_key: API_KEY };\n\nexport async function fetchTrandingMovies() {\n    try {\n        const response = await axios.get(`trending/movie/day`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMoviesByQuery(query) {\n    try {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMovieDetails(id) {\n    try {\n        const response = await axios.get(`/movie/${id}`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMovieCast(id) {\n    try {\n        const response = await axios.get(`/movie/${id}/credits`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMovieReviews(id) {\n    try {\n        const response = await axios.get(`/movie/${id}/reviews`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}"],"names":["ReviewsContainer","styled","ReviewsErrMessage","Review","Content","Author","Date","movieId","useParams","useState","movieReviews","setMovieReviews","useEffect","fetchMovieReviews","data","results","getReview","length","map","id","author","content","publishDate","updated_at","slice","fetchTrandingMovies","axios","response","status","console","log","message","fetchMoviesByQuery","query","fetchMovieDetails","fetchMovieCast","api_key"],"sourceRoot":""}