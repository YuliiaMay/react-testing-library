{"version":3,"file":"static/js/410.92a9a581.chunk.js","mappings":"4RAEaA,EAAgBC,EAAAA,GAAAA,QAAH,+CAIbC,EAAWD,EAAAA,GAAAA,GAAH,iFAMRE,EAAWF,EAAAA,GAAAA,GAAH,oGAKRG,EAAQH,EAAAA,GAAAA,IAAH,4CAILI,EAASJ,EAAAA,GAAAA,EAAH,4FAMNK,EAAYL,EAAAA,GAAAA,EAAH,8C,SCsBtB,EA1Ca,WACT,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAcA,OAXAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,WAA4BL,GAA5B,wFACuBM,EAAAA,EAAAA,IAAeN,GADtC,OACUO,EADV,OAEIH,EAAaG,EAAKC,MAFtB,2CADY,yBAAC,SAAD,2BAMZC,CAAaT,EAEhB,GAAE,CAACA,KAIA,SAACP,EAAD,WACI,SAACE,EAAD,UAEQQ,EAAUO,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACjCC,EAAO,yCAAqCD,GAClD,OACI,UAAClB,EAAD,YACI,SAACC,EAAD,CACImB,IACAF,EACMC,E,kpJAENE,IAAKL,KACT,UAACd,EAAD,2BAAoB,kBAApB,IAA2Bc,MAC3B,UAACb,EAAD,0BAAsB,kBAAtB,IAA6Bc,OARlBF,EAWtB,OAMpB,C,mMCzCM,SAAeO,IAAtB,4CAAO,OAAP,oBAAO,6GAEwBC,EAAAA,EAAAA,IAAA,sBAFxB,UAGyB,OADlBC,EAFP,QAGcC,OAHd,yCAIYD,EAASb,MAJrB,uDAOCe,QAAQC,IAAI,KAAMC,SAPnB,gFAWA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,gGAEwBP,EAAAA,EAAAA,IAAA,8BAAiCO,IAFzD,UAGyB,OADlBN,EAFP,QAGcC,OAHd,yCAIYD,EAASb,MAJrB,uDAOCe,QAAQC,IAAI,KAAMC,SAPnB,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gGAEwBT,EAAAA,EAAAA,IAAA,iBAAoBS,IAF5C,UAGyB,OADlBR,EAFP,QAGcC,OAHd,yCAIYD,EAASb,MAJrB,uDAOCe,QAAQC,IAAI,KAAMC,SAPnB,gFAWA,SAAelB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BsB,GAA9B,gGAEwBT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aAFxB,UAGyB,OADlBR,EAFP,QAGcC,OAHd,yCAIYD,EAASb,MAJrB,uDAOCe,QAAQC,IAAI,KAAMC,SAPnB,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,gGAEwBT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aAFxB,UAGyB,OADlBR,EAFP,QAGcC,OAHd,yCAIYD,EAASb,MAJrB,uDAOCe,QAAQC,IAAI,KAAMC,SAPnB,gFA/CPL,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CAAEW,QAFV,mC","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/movies-api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastContainer = styled.section`\n    margin-top: 40px;\n`;\n\nexport const CastList = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 6px;\n`;\n\nexport const CastItem = styled.li`\n    max-width: calc((100% - 7 * 8px) / 8);\n    border: 1px solid #446381;\n`;\n\nexport const Image = styled.img`\n    height: 230px;\n`;\n\nexport const Player = styled.p`\n    font-size: 18px;\n    margin-bottom: 24px;\n    color: #414141\n`;\n\nexport const Character = styled.p`\n    font-size: 18px;\n`;\n\n\n\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieCast } from \"services/movies-api\";\nimport { CastContainer, CastList, CastItem, Image, Character, Player } from \"./Cast.styled\";\nimport defaultActorPhoto from '../../images/no-avatar.jpg';\n\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [movieCast, setMovieCast] = useState([]);\n\n\n    useEffect(() => {\n        async function getMovieCast(movieId) {\n            const data = await fetchMovieCast(movieId);\n            setMovieCast(data.cast)\n        }\n\n        getMovieCast(movieId);\n        \n    }, [movieId]);\n\n\n    return (\n        <CastContainer>\n            <CastList>\n                {\n                    movieCast.map(({ cast_id, name, character, profile_path }) => {\n                        const imgPath = `https://image.tmdb.org/t/p/w500${profile_path}`;\n                        return (\n                            <CastItem key={cast_id}>\n                                <Image\n                                    src={\n                                    profile_path\n                                        ? imgPath\n                                        : defaultActorPhoto}\n                                    alt={name}/>\n                                <Player>Actor name: <br/> {name}</Player>\n                                <Character>Character: <br/> {character}</Character>\n                            </CastItem>\n                        )\n                    })\n                }\n            </CastList>\n        </CastContainer>\n    )\n\n};\n\nexport default Cast;","import axios from \"axios\";\n\nconst API_KEY = '0feaca93847c0f717b0c2876a0a51030';\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\naxios.defaults.params = { api_key: API_KEY };\n\nexport async function fetchTrandingMovies() {\n    try {\n        const response = await axios.get(`trending/movie/day`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMoviesByQuery(query) {\n    try {\n        const response = await axios.get(`/search/movie?query=${query}`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMovieDetails(id) {\n    try {\n        const response = await axios.get(`/movie/${id}`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMovieCast(id) {\n    try {\n        const response = await axios.get(`/movie/${id}/credits`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}\n\nexport async function fetchMovieReviews(id) {\n    try {\n        const response = await axios.get(`/movie/${id}/reviews`);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch(error) {\n        console.log(error.message);\n    }\n}"],"names":["CastContainer","styled","CastList","CastItem","Image","Player","Character","movieId","useParams","useState","movieCast","setMovieCast","useEffect","fetchMovieCast","data","cast","getMovieCast","map","cast_id","name","character","profile_path","imgPath","src","alt","fetchTrandingMovies","axios","response","status","console","log","message","fetchMoviesByQuery","query","fetchMovieDetails","id","fetchMovieReviews","api_key"],"sourceRoot":""}